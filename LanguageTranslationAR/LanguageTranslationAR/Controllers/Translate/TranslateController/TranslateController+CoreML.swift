//
//  DictionaryController+CoreML.swift
//  WWDC-App
//
//  Created by Cesare de Cal on 16/03/2018.
//  Copyright Â© 2018 Cesare Gianfilippo Astianatte de Cal. All rights reserved.
//

import UIKit
import Vision

extension TranslateController {
    
    func setupCoreML() {
        print("Setting up CoreML...")
        
		guard let mlmodelcFile = Bundle.main.url(forResource: "Inceptionv3", withExtension: "mlmodelc") else {
			print("Couldn't locate the CoreML model")
			return
		}
        
		do {
			let selectedModel = try VNCoreMLModel(for: try MLModel(contentsOf: mlmodelcFile))
			let classificationRequest = VNCoreMLRequest(model: selectedModel, completionHandler: classificationCompleteHandler)
            
            // An ML model processes input images in a fixed aspect ratio, but input images may have arbitrary aspect ratios, so Vision must scale or crop the image to fit
            classificationRequest.imageCropAndScaleOption = .centerCrop
			visionRequests = [classificationRequest]
		} catch let error {
            print(error.localizedDescription)
		}
	}
		
    func processVisionRequests() {
		guard let pixbuff = sceneView.session.currentFrame?.capturedImage else { return }
		let ciImage = CIImage(cvPixelBuffer: pixbuff)
        let imageRequestHandler = VNImageRequestHandler(ciImage: ciImage)
		do {
			try imageRequestHandler.perform(self.visionRequests)
		} catch {
            print(error.localizedDescription)
		}
	}
	
    private func classificationCompleteHandler(request: VNRequest, error: Error?) {
		if let error = error {
			print(error.localizedDescription)
		}
        
        // VNObservation results generated by request processing
        guard let observations = request.results, observations.count > 1 else {
			print("Request returned no results.")
			return
		}
                
        // Classifications are ordered by confidence, so we have most confidence in the first result
        if let classification = observations.first as? VNClassificationObservation {
            if classification.confidence > 0.3 {
                let labels = classification.identifier.components(separatedBy: ",")
                if let label = labels.first {
                    self.mlPrediction = label
                }
            } else {
                mlPrediction = nil
            }
        }
	}
}
